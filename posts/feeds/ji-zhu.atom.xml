<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cynosura - 技术</title><link href="/" rel="alternate"></link><link href="https://cynosura.one/posts/feeds/ji-zhu.atom.xml" rel="self"></link><id>/</id><updated>2023-08-01T11:00:00+08:00</updated><entry><title>使用 CSS Grid 重写个人页</title><link href="/rewrite-with-css-grid.html" rel="alternate"></link><published>2023-08-01T11:00:00+08:00</published><updated>2023-08-01T11:00:00+08:00</updated><author><name>Frudrax Cheng</name></author><id>tag:None,2023-08-01:/rewrite-with-css-grid.html</id><summary type="html">&lt;p&gt;从古代迈入现代，终于摆脱上古 Float 浮动排版了&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近趁着自己还有时间精力，把个人页（包括使用 Pelican 生成的文章部分）由 Float 换成 Grid 排版。其中一大原因是学前端比较早，即使当前的个人页是 2022 年编写的，仍保留了相当一部分早前的排版习惯。随着个人页功能模块的增多，愈加发现 Float 排版的局限性。例如必须时刻记得添加 &lt;code&gt;clear: both&lt;/code&gt; 标签，浮动位置调整不灵活等等。&lt;/p&gt;
&lt;p&gt;于是决定保留设计风格，将网页包括 CSS 部分整体翻新，显著增加了个人页的可维护性。&lt;/p&gt;
&lt;h2&gt;直观的网格排版&lt;/h2&gt;
&lt;p&gt;不同于 Float 的浮动概念，Grid 是通过一个个网格来划分内容区块。最初在重写 &lt;a href="https://cynosura.one/friends"&gt;友链列表&lt;/a&gt; 时，便在右侧列表部分运用了 Grid 排版。在实际运用过程中发现这种排版方式相当简单直觉，像常见的两栏、三栏等比例划分，都只需要一行指定行列个数即可搞定，还也可自由指定每一行的宽度占比。&lt;/p&gt;
&lt;p&gt;例如需要实现友链列表的两栏均分效果，只需要一个大 div 将列表包裹起来，加上简单的样式设定，只要规划好网格排版即可，以下是我实际划分友链列表的 CSS 代码，非常简单。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;friends-list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;同时在一个大网格里还可以嵌套数个 Grid，在实际运用过程中十分灵活。 &lt;/p&gt;
&lt;h2&gt;兼容性&lt;/h2&gt;
&lt;p&gt;Grid 的最大问题其实是兼容性。现代浏览器都需要迟至 2017 年才开始逐渐支持显示 Grid 样式，IE11 就更不可能支持了。在一些需要考虑兼容性的场合，可能还需要依赖 Flex 或是更老的 Float 进行网页排版。&lt;/p&gt;
&lt;p&gt;&lt;img alt="can-i-use-css-grid" src="images/rewrite-with-css-grid/can-i-use-css-grid.png"&gt;&lt;/p&gt;
&lt;p&gt;像我这种没人看的个人页用用还好，毕竟原先图方便就有用各种 CSS3 的简化标签，已经无所谓再多个 Grid 排版了。实际运用还可参考 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout"&gt;MDN&lt;/a&gt; 的相关文档，个人也是参考了 MDN 文档和 ChatGPT 的问答，才逐渐将个人页改写完毕的。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid"&gt;grid - CSS: Cascading Style Sheets | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/css-grid"&gt;CSS Grid Layout (level 1) | Can I use...&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="技术"></category></entry><entry><title>Hello Pelican</title><link href="/hello-pelican.html" rel="alternate"></link><published>2023-07-27T21:07:00+08:00</published><updated>2023-07-27T21:07:00+08:00</updated><author><name>Frudrax Cheng</name></author><id>tag:None,2023-07-27:/hello-pelican.html</id><summary type="html">&lt;p&gt;尝试利用 Pelican 替代原本使用的 Hexo&lt;/p&gt;</summary><content type="html">&lt;p&gt;尝试利用 &lt;a href="https://getpelican.com"&gt;Pelican&lt;/a&gt; 替代原本使用的 Hexo，并废除了独立 Blog 入口。&lt;/p&gt;
&lt;p&gt;Pelican 上手还是挺简单的，基本上参照 &lt;a href="https://docs.getpelican.com/en/latest/quickstart.html"&gt;官方文档&lt;/a&gt; 即可快速生成可用的文章页。&lt;/p&gt;
&lt;p&gt;相较于 Hexo，Pelican 基于 Python，终于不用被 Node.js 那堆依赖折腾得死去活来了，整体操作逻辑也更加清晰。但由于 Pelican 的用户较少，网络上可用的主题屈指可数，无意中拉高了使用门槛。建议对 Pelican 有兴趣的可以像我一样动手折腾自定义主题；基于官方的 simple 主题修改不难，只要对着文档修改，加上自己的一点样式即可。&lt;/p&gt;
&lt;p&gt;用半天时间移植了原本用于 Hexo 的自定义主题，目前只修改好了 base、article 和 index 页就仓促上线了，难免存在疏漏。如果遇到样式问题请在下面留言告诉我，非常感谢~&lt;/p&gt;
&lt;h2&gt;增加 RSS 支持&lt;/h2&gt;
&lt;p&gt;斟酌再三，还是决定为文章页增加 RSS (实际是 Atom) 支持，仅需在配置文件里指定生成路径即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;FEED_ALL_ATOM = &amp;#39;feeds/all.atom.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FEED_DOMAIN = SITEURL&lt;/span&gt;
&lt;span class="n"&gt;FEED_MAX_ITEMS  =  15&lt;/span&gt;
&lt;span class="n"&gt;RSS_FEED_SUMMARY_ONLY = False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM = None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM = None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM = None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS = None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;FEED_ALL_ATOM&lt;/code&gt; 指定 RSS 的生成位置。Pelican 提倡尽量使用绝对地址，这种理念在 &lt;a href="https://docs.getpelican.com/en/stable/settings.html#feed-settings"&gt;官方文档&lt;/a&gt; 的相关设置中就有所体现。&lt;/p&gt;
&lt;p&gt;若该值未设置成绝对地址，则在每次生成中会跳出警告：Feeds generated without SITEURL set properly may not be valid。要使用相对地址并去除警告，则必须设置 FEED_DOMAIN。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FEED_DOMAIN&lt;/code&gt; 指定 RSS 生成域名，可直接使用 SITEURL 变量，更加灵活。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FEED_MAX_ITEMS&lt;/code&gt; 设置 RSS 生成的最大文章量。这里推荐设置一个合适的限制值，以防文章较多时，RSS 为读者推送动辄上百篇的文章，影响阅读体验。我认为设置在 10~20 篇左右为宜。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSS_FEED_SUMMARY_ONLY&lt;/code&gt; 指定 RSS 包括全文，还是仅生成摘要信息。个人建议 RSS 包含全文而非摘要，仅生成摘要虽然能引导读者跳转到网站阅读，但这种操作十分影响阅读体验。试想当你在阅读器看到感兴趣的文章，却要跳转到网页才能继续观看，你会选择跳转还是直接关闭呢，相信你心里自有答案。&lt;/p&gt;
&lt;p&gt;设置并重新执行文章生成后，RSS 就会在指定位置生成好了，添加到网页任意位置即可。&lt;/p&gt;
&lt;h2&gt;生成站点地图 (Sitemap)&lt;/h2&gt;
&lt;p&gt;生成站点地图 (Sitemap) 可以告诉搜索引擎应该抓取哪些页面，及文章优先级排序，从而帮助搜索引擎准确收录文章。Pelican 支持通过 pip 来安装及管理插件，安装 &lt;a href="https://github.com/pelican-plugins/sitemap"&gt;Sitemap 插件&lt;/a&gt; 并写入配置文件，即可一键生成站点地图。&lt;/p&gt;
&lt;p&gt;首先通过 pip 来安装插件: &lt;code&gt;python -m pip install pelican-sitemap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，将如下信息放入配置文件，并重新生成站点。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SITEMAP = {
    &amp;quot;format&amp;quot;: &amp;quot;xml&amp;quot;,
    &amp;quot;priorities&amp;quot;: {
        &amp;quot;articles&amp;quot;: 0.8,
        &amp;quot;indexes&amp;quot;: 1.0,
        &amp;quot;pages&amp;quot;: 0.8
    },
    &amp;quot;changefreqs&amp;quot;: {
        &amp;quot;articles&amp;quot;: &amp;quot;monthly&amp;quot;,
        &amp;quot;indexes&amp;quot;: &amp;quot;daily&amp;quot;,
        &amp;quot;pages&amp;quot;: &amp;quot;monthly&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中 &lt;code&gt;priorities&lt;/code&gt; 指定了页面的优先级，&lt;code&gt;changefreqs&lt;/code&gt; 则告知搜索引擎页面的更新频率。一般首页拉取频率设置高一点，文章不是周更的就保持默认月更选项，无需变动。&lt;/p&gt;
&lt;p&gt;生成站点地图并部署在服务器以后，在 &lt;a href="https://search.google.com/search-console"&gt;Google Search Console&lt;/a&gt; 填入站点地图的 URL 地址并上传，之后 Google 将会定期抓取站点地图并生成索引收录。&lt;/p&gt;</content><category term="技术"></category></entry><entry><title>Android GRF 更新策略简析</title><link href="/android-grf.html" rel="alternate"></link><published>2022-11-16T14:58:18+08:00</published><updated>2022-11-16T14:58:18+08:00</updated><author><name>Frudrax Cheng</name></author><id>tag:None,2022-11-16:/android-grf.html</id><summary type="html">&lt;p&gt;在参考了几个消息来源后，决定总结一下我理解的 GRF 具体是什么东西&lt;/p&gt;</summary><content type="html">&lt;p&gt;自 Android 11 起，Google 开始实施被称为 Google Requirements Freeze (简称 GRF) 的更新策略，在参考了几个消息来源后，决定总结一下我理解的 GRF 具体是什么东西，又能如何影响 Android 版本更新节奏。&lt;/p&gt;
&lt;p&gt;这导致上游 SoC 不得不维护多种 Vendor 版本，同时若新版本 Android 提升了底层功能要求（例如必须支持多摄像头切换 API），一些想要升级通过新版本兼容性测试 (Compatibility Definition Document, CCD) 就会遇到困难，而不得不等待上游 SoC 供应商更新 Vendor 版本。这也是过去中低端机及联发科机型即使拥有 Project Treble，更新 Android 也不积极的首要，无论是上游 SoC 供应商还是 OEM 厂商都不愿意在中低端机上投入过多心力去维护。&lt;/p&gt;
&lt;p&gt;&lt;img alt="treble-plus-one-equals-four-4" src="images/android-grf/treble-plus-one-equals-four-4.webp"&gt;&lt;/p&gt;
&lt;p&gt;而在 Google Requirements Freeze 引入之后，Vendor 版本将被冻结，而 Google 将承诺为各 Vendor 版本提供 N+3 的特性向后兼容保证。例如首次利用 GRF 特性的骁龙 888，Vendor 版本适配当年的 Android 11，那么即便后续升级 Android 版本，Vendor 版本也不再变动，而 Google 将保证 Android 14 能够支持 11 的 Vendor 版本启动，并通过新版本的兼容性测试。这也是 Nothing Phone 作为 2022 年发布并出厂搭载 Android 12 的手机，但其 Vendor 版本仍然基于 Android 11 的原因。其搭载的骁龙 778G+ 同骁龙 888 一样，也是首批支持 GRF 特性的 SoC。&lt;/p&gt;
&lt;p&gt;&lt;img alt="treble-plus-one-equals-four-6" src="images/android-grf/treble-plus-one-equals-four-6.webp"&gt;&lt;/p&gt;
&lt;p&gt;GRF 无疑减轻了上游 SoC 供应商的维护压力，在 GRF 之前，高通承诺为 Vendor 提供 N+2 及 3 年的安全更新支持，而 GRF 至少能为 OEM 厂商提供绕开上游 SoC 供应商的机会，独立提供 N+3 的大版本更新（这也是站在 Android 维护的角度，我不推荐任何骁龙 870 新机的原因，由于反复鞭尸炒冷饭，可预见今年发布的 870 新机即便定价没怎么降，各种维护支持都将显著比同期中高端 SoC 来得更差）&lt;/p&gt;
&lt;p&gt;当然引入 GRF 也带来一些问题，由于 Google 必须保证 Android 新版本与先前 Vendor 版本的兼容性，而无法做到涉及硬件支持的特性在相同版本 Android 上体验一致。例如由于涉及 Vendor 改动，即使 Google 在 Android 12 上引入了禁用 2G 的开关，也无法推广到所有 Android 12 的设备上，即使是出厂搭载 Android 12 的设备也是如此。同时由于自发布起 Vendor 版本就被冻结，导致 GRF 机型在后续维护中都将很难获得涉及硬件改动的新特性。&lt;/p&gt;
&lt;p&gt;同时 Google 对 GRF 的承诺只到 N+3，若 OEM 厂商想扩展支持到 4 个大版本升级，将必须自行移植最新版本涉及 Vendor 的特性需求，以通过对应版本的兼容性测试。即 GRF 的出现能让各厂商轻易做到 N+3 的支持承诺，却很难更近一步做到 N+4。同时也极度不利于利用旧 SoC 推出新机的厂商保持正常的支持更新节奏。&lt;/p&gt;
&lt;p&gt;对于刚刚发布的骁龙 8 Gen 2 来说，自然也支持 GRF 策略。骁龙 8 Gen 2 搭载最新的 Android 13 版本的 Vendor，将享受完整的 Android 13 底层特性支持，并继续提供 N+3 的版本更新承诺。&lt;/p&gt;
&lt;p&gt;参考来源：&lt;a href="https://android-developers.googleblog.com/2020/12/treble-plus-one-equals-four.html"&gt;Android Developers Blog: Treble Plus One Equals Four&lt;/a&gt;&lt;/p&gt;</content><category term="技术"></category></entry><entry><title>CVE-2022-20465 锁屏绕过漏洞原理分析</title><link href="/android-lock-screen-bypass-bug-analysis.html" rel="alternate"></link><published>2022-11-11T14:36:49+08:00</published><updated>2022-11-11T14:36:49+08:00</updated><author><name>Frudrax Cheng</name></author><id>tag:None,2022-11-11:/android-lock-screen-bypass-bug-analysis.html</id><summary type="html">&lt;p&gt;想弄明白漏洞的背后原理，于是就有了这篇简单的分析总结文章&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google 在 2022 年 11 月的 &lt;a href="https://source.android.com/docs/security/bulletin/2022-11-01"&gt;Android 安全公告&lt;/a&gt; 中首次向公众披露了编号为 CVE-2022-20465 的安全漏洞。根据上报者 David Schütz 的说明及演示，仅需插入已知 PUK 码的 SIM 卡插入目标手机，并故意输错三次 PIN 码后输入正确的 PUK 码，即可绕过锁屏密码直接解锁手机。在惊讶该漏洞的复现难度如此简单之余，我也想弄明白漏洞的背后原理，于是就有了这篇简单的分析总结文章。&lt;/p&gt;
&lt;p&gt;得益于 Android 的开源特性，我们可以查到有关修补 CVE-2022-20465 的历史提交记录，并分析出 AOSP 团队采用了哪些手段来强化安全性。&lt;/p&gt;
&lt;p&gt;&lt;img alt="CVE-2022-20465" src="images/android-lock-screen-bypass-bug-analysis/CVE-2022-20465-1.webp"&gt;&lt;/p&gt;
&lt;p&gt;首先，在 Android 上有个被称作“安全屏幕” (security screen) 的概念，指纹输入界面、密码输入界面，以及此次造成问题的 PIN 码输入界面和 PUK 输入界面都包含在“安全屏幕”之内。&lt;/p&gt;
&lt;p&gt;同时安全屏幕之间可以相互堆叠，即 PUK 输入界面实际是堆叠在指纹输入界面之上。由于函数调用设置错误，在 PUK 码校验通过后，实际也一并关闭了叠在下面的指纹输入页面，导致此次输入 PUK 码后手机意外解锁的情况。&lt;/p&gt;
&lt;p&gt;Google 对此重写了整套函数调用逻辑，现在调用请求可以指定要关闭的安全屏幕类型，假设请求关闭的安全屏幕未处于活动状态（例如今天指纹输入界面被叠在 PUK 码输入界面之下），则不会执行任何操作。&lt;/p&gt;
&lt;p&gt;注意该漏洞实际是绕过锁屏密码输入界面，并非真正解锁手机。当设备处于首次启动未解锁数据加密的情况下，此时 PUK 码虽然可以绕过锁屏界面，但手机会卡在“Android 正在启动”界面，并不能解锁数据分区。&lt;/p&gt;
&lt;p&gt;尽管漏洞的演示以 Pixel 6 为主，但该漏洞理论上影响所有 2022 年 11 月安全补丁以前，且未修改安全屏幕相关逻辑的 Android 手机。由于漏洞的复现难度极低，如有条件还是尽早更新至 11 月安全补丁为妙。&lt;/p&gt;
&lt;p&gt;其实整件事情看下来我最不满的是 Google 的消极态度。根据上报者 David Schütz 的说明，这个漏洞 6 月就被上报了，Google 一直摸到 11 月安全补丁才修复...甚至 Google 本来打算 12 月的，是披露者持续跟踪这个问题，才争取到提前发布 最恐怖的是，他还不是最早的披露者，之前已经有人上报过这个问题了，直到这次有人一直跟着 Google 才重视起来修。可怜的 Pixel 4 就这么错过了漏洞的官方修补机会（也许吧，但 Google 几乎不会在结束支持后还为老机型推修补 OTA 的）。同时，由于 Android 9 已超过支持周期，本次修补也仅限 Android 10 及之后的版本，不代表之前的版本就不存在该问题。手持 Android 9 及更早之前版本的机主，也只能寄希望于第三方 ROM 了。&lt;/p&gt;
&lt;p&gt;最后如对 CVE-2022-20465 从发现到最终修复全过程比较感兴趣的朋友，可以进一步阅读 David Schütz 本人对该事件的记录文章，其催更的精彩程度不亚于任何狗血肥皂剧🙃。&lt;/p&gt;</content><category term="技术"></category></entry><entry><title>记一次 zabbix 数据库编码排错</title><link href="/zabbix-cannot-set-mysql-character-to-utf8.html" rel="alternate"></link><published>2022-07-22T14:36:10+08:00</published><updated>2022-07-22T14:36:10+08:00</updated><author><name>Frudrax Cheng</name></author><id>tag:None,2022-07-22:/zabbix-cannot-set-mysql-character-to-utf8.html</id><summary type="html">&lt;p&gt;简单记录在 zabbix 5.0 上遇到数据库乱码的解决过程&lt;/p&gt;</summary><content type="html">&lt;p&gt;这几天在折腾 zabbix 5.x 上奇怪的编码问题，原型规则写的是中文，页面上也正常显示了中文，但 Discover 到具体监控项，以及告警推送就全部变 "???" 了。&lt;/p&gt;
&lt;p&gt;查日志报错 cannot set MySQL character set to "utf8"，如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="issue-1" src="images/zabbix-cannot-set-mysql-character-to-utf8/issue-1.png"&gt;&lt;/p&gt;
&lt;p&gt;搜了一圈推测是 zabbix 和 MariaDB 的兼容问题，MariaDB 10.6 不支持直接 'utf8'，只支持具体到 'utf8mb3' 或 'utf8mb4'，而 zabbix 的检测逻辑没考虑到数据库不支持 'utf8' 的情况，而官方问题追踪里说已经在 zabbix 5.0.26 里 &lt;a href="https://support.zabbix.com/browse/ZBX-21301"&gt;修了&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img alt="issue-2" src="images/zabbix-cannot-set-mysql-character-to-utf8/issue-2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;在 zabbix 推出 5.0.26 正式版本之前，建议改用其他数据库，或使用 zabbix 6.x 版本并改用 'utf8mb4' 编码。&lt;/p&gt;</content><category term="技术"></category></entry></feed>